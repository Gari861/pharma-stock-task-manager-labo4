// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppPharma.Models;

#nullable disable

namespace WebAppPharma.Migrations
{
    [DbContext(typeof(AppDBcontext))]
    [Migration("20241003042457_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAppPharma.Models.Cargo", b =>
                {
                    b.Property<int>("IdCargo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCargo"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCargo");

                    b.ToTable("Cargos");
                });

            modelBuilder.Entity("WebAppPharma.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("WebAppPharma.Models.Empleado", b =>
                {
                    b.Property<int>("IdEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmpleado"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Dni")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdCargo")
                        .HasColumnType("int");

                    b.Property<int>("IdEstadodeEmpleado")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Telefono")
                        .HasColumnType("bigint");

                    b.HasKey("IdEmpleado");

                    b.HasIndex("IdCargo");

                    b.HasIndex("IdEstadodeEmpleado");

                    b.ToTable("Empleados");
                });

            modelBuilder.Entity("WebAppPharma.Models.EstadodeEmpleado", b =>
                {
                    b.Property<int>("IdEstadodeEmpleado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadodeEmpleado"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstadodeEmpleado");

                    b.ToTable("EstadosdeEmpleados");
                });

            modelBuilder.Entity("WebAppPharma.Models.EstadodeTarea", b =>
                {
                    b.Property<int>("IdEstadodeTarea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEstadodeTarea"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEstadodeTarea");

                    b.ToTable("EstadosdeTareas");
                });

            modelBuilder.Entity("WebAppPharma.Models.Prioridad", b =>
                {
                    b.Property<int>("IdPrioridad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPrioridad"));

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdPrioridad");

                    b.ToTable("Prioridades");
                });

            modelBuilder.Entity("WebAppPharma.Models.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProducto"));

                    b.Property<int>("CantSock")
                        .HasColumnType("int");

                    b.Property<long>("CodigoProducto")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProducto");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("WebAppPharma.Models.ProductoCategoria", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("int");

                    b.HasKey("IdProducto", "IdCategoria");

                    b.HasIndex("IdCategoria");

                    b.ToTable("ProductosCategorias");
                });

            modelBuilder.Entity("WebAppPharma.Models.ProductoProveedor", b =>
                {
                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.HasKey("IdProducto", "IdProveedor");

                    b.HasIndex("IdProveedor");

                    b.ToTable("ProductosProveedores");
                });

            modelBuilder.Entity("WebAppPharma.Models.Proveedor", b =>
                {
                    b.Property<int>("IdProveedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProveedor"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Telefono")
                        .HasColumnType("bigint");

                    b.HasKey("IdProveedor");

                    b.ToTable("Proveedores");
                });

            modelBuilder.Entity("WebAppPharma.Models.Tarea", b =>
                {
                    b.Property<int>("IdTarea")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTarea"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLimite")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdEstadodeTarea")
                        .HasColumnType("int");

                    b.Property<int>("IdPrioridad")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdTarea");

                    b.HasIndex("IdEstadodeTarea");

                    b.HasIndex("IdPrioridad");

                    b.ToTable("Tareas");
                });

            modelBuilder.Entity("WebAppPharma.Models.TareaEmpleado", b =>
                {
                    b.Property<int>("IdTarea")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.HasKey("IdTarea", "IdEmpleado");

                    b.HasIndex("IdEmpleado");

                    b.ToTable("TareasEmpleados");
                });

            modelBuilder.Entity("WebAppPharma.Models.UbicacionProducto", b =>
                {
                    b.Property<int>("IdUbicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUbicacion"));

                    b.Property<string>("Estante")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdProducto")
                        .HasColumnType("int");

                    b.Property<string>("Pasillo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUbicacion");

                    b.HasIndex("IdProducto")
                        .IsUnique();

                    b.ToTable("UbicacionesProductos");
                });

            modelBuilder.Entity("WebAppPharma.Models.Empleado", b =>
                {
                    b.HasOne("WebAppPharma.Models.Cargo", "Cargo")
                        .WithMany("Empleados")
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppPharma.Models.EstadodeEmpleado", "EstadodeEmpleado")
                        .WithMany("Empleados")
                        .HasForeignKey("IdEstadodeEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cargo");

                    b.Navigation("EstadodeEmpleado");
                });

            modelBuilder.Entity("WebAppPharma.Models.ProductoCategoria", b =>
                {
                    b.HasOne("WebAppPharma.Models.Categoria", "Categoria")
                        .WithMany("ProductosCategorias")
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppPharma.Models.Producto", "Producto")
                        .WithMany("ProductosCategorias")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("WebAppPharma.Models.ProductoProveedor", b =>
                {
                    b.HasOne("WebAppPharma.Models.Producto", "Producto")
                        .WithMany("ProductosProveedores")
                        .HasForeignKey("IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppPharma.Models.Proveedor", "Proveedor")
                        .WithMany("ProductosProveedores")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("WebAppPharma.Models.Tarea", b =>
                {
                    b.HasOne("WebAppPharma.Models.EstadodeTarea", "EstadodeTarea")
                        .WithMany("Tareas")
                        .HasForeignKey("IdEstadodeTarea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppPharma.Models.Prioridad", "Prioridad")
                        .WithMany("Tareas")
                        .HasForeignKey("IdPrioridad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadodeTarea");

                    b.Navigation("Prioridad");
                });

            modelBuilder.Entity("WebAppPharma.Models.TareaEmpleado", b =>
                {
                    b.HasOne("WebAppPharma.Models.Empleado", "Empleado")
                        .WithMany("TareasEmpleados")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppPharma.Models.Tarea", "Tarea")
                        .WithMany("TareasEmpleados")
                        .HasForeignKey("IdTarea")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Tarea");
                });

            modelBuilder.Entity("WebAppPharma.Models.UbicacionProducto", b =>
                {
                    b.HasOne("WebAppPharma.Models.Producto", "Producto")
                        .WithOne("UbicacionProducto")
                        .HasForeignKey("WebAppPharma.Models.UbicacionProducto", "IdProducto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("WebAppPharma.Models.Cargo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("WebAppPharma.Models.Categoria", b =>
                {
                    b.Navigation("ProductosCategorias");
                });

            modelBuilder.Entity("WebAppPharma.Models.Empleado", b =>
                {
                    b.Navigation("TareasEmpleados");
                });

            modelBuilder.Entity("WebAppPharma.Models.EstadodeEmpleado", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("WebAppPharma.Models.EstadodeTarea", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("WebAppPharma.Models.Prioridad", b =>
                {
                    b.Navigation("Tareas");
                });

            modelBuilder.Entity("WebAppPharma.Models.Producto", b =>
                {
                    b.Navigation("ProductosCategorias");

                    b.Navigation("ProductosProveedores");

                    b.Navigation("UbicacionProducto");
                });

            modelBuilder.Entity("WebAppPharma.Models.Proveedor", b =>
                {
                    b.Navigation("ProductosProveedores");
                });

            modelBuilder.Entity("WebAppPharma.Models.Tarea", b =>
                {
                    b.Navigation("TareasEmpleados");
                });
#pragma warning restore 612, 618
        }
    }
}
